syntax = "proto3";

package echo;

option go_package = "api/echo/proto";

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

message EchoRequest {

  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "Echo request"
			description: "The echo request"
			required: ["value"]
		}
		example: { value: '{ "value": "hello!" }' }
  };
  
  string value = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "The value to echo"}];
}

message EchoResponse {

  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "Echo response"
			description: "The echo response"
			required: ["value"]
		}
		example: { value: '{ "value": "hello!" }' }
  };

  string value = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "The echoed value"}];
}

// The Echo service allows users to probe the server with a value and have the 
// value returned verbatim.
service Echo {

  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_tag) = {
    description: "The Echo service allows users to probe the server with a value and have the value returned verbatim."
    external_docs: {
			url: "https://en.wikipedia.org/wiki/Echo";
			description: "Read up on the echo acoustic phenomenon";
		}
	};
  
  // The Echo operation enables users to probe the server with a value and have 
  // the value returned verbatim.
  rpc Echo(EchoRequest) returns (EchoResponse) {
    
    option (google.api.http) = {
      post: "/v1/echo"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description: "The Echo operation enables users to probe the server with a value and have the value returned verbatim."
      summary: "Echo"
			security: {
				security_requirement: {
					key: "OAuth2"
					value: {
						scope: "echo"
					}
				}
			}
    };

  }
}